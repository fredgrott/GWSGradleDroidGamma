/*
 * Copyright (C) 2016 Fred Grott(aka shareme GrottWorkShop)
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and limitations under License.
 */





apply plugin: 'com.android.application'
// to get build time stats
apply plugin: 'de.hannesstruss.godot'
// for debug logging via @DebugLog annotations
apply plugin: 'hugo'
// to get test code coverage of both plain unit tests and instrumented tests
apply plugin: 'jacoco-everywhere'
// felix' spoon gradle plugin which includes a more up to date spoon runner version
apply plugin: 'de.felixschulze.gradle.spoon'
// to version the artifacts
apply plugin: 'org.moallemi.advanced-build-version'
// dissect layout traversals, helpful for custom view debugging
//apply plugin: 'org.lucasr.probe'
// some of our injectors depend upon apt
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'view-inspector'

advancedVersioning {
    nameOptions {
        versionMajor 1
        versionBuild 0
    }
    codeOptions {
        versionCodeType org.moallemi.gradle.internal.VersionCodeType.DATE

        dependsOnTasks 'release'

    }
    //if flavors than re use nameFormat to include the flavorName
    outputOptions {
        renameOutput true
        nameFormat '$projectName-$appName-$buildType-$flavorName-$versionName-$versionCode'

    }
}

def appVersionName = advancedVersioning.versionName
def appVersionCode = advancedVersioning.versionCode

/*
 We define some buildConfigField defs here to use
 */
def BOOLEAN = "boolean"
def TRUE = "true"
def FALSE = "false"
def STRING = "String"
def LOG_HTTP_REQUESTS = "LOG_HTTP_REQUESTS"
def REPORT_CRASHES = "REPORT_CRASHES"
def ENABLE_VIEW_SERVER = "ENABLE_VIEW_SERVER"
def ENABLE_SHARING = "ENABLE_SHARING"
def GIT_HASH = "GIT_HASH"



android {

    /*
    Sets-up a sharedTest folder to store test code that can
    be shared between test and androidTest
     */
    sourceSets {
        String sharedTestDir = 'src/sharedTest/java'
        test {
            java.srcDir sharedTestDir
        }
        androidTest {
            java.srcDir sharedTestDir
        }

    }

    def globalConfiguration = rootProject.extensions.getByName("ext")

    compileSdkVersion globalConfiguration.getAt("androidCompileSdkVersion")
    buildToolsVersion globalConfiguration.getAt("androidBuildToolsVersion")


    defaultConfig {
        applicationId "com.github.shareme.gwsgradledroidgamma"
        minSdkVersion globalConfiguration.getAt("androidMinSdkVersion")
        targetSdkVersion globalConfiguration.getAt("androidTargetSdkVersion")
        //noinspection GroovyAssignabilityCheck
        versionCode appVersionCode
        //noinspection GroovyAssignabilityCheck
        versionName appVersionName
        testInstrumentationRunner globalConfiguration.getAt("testInstrumentationRunner")
        testApplicationId "com.github.shareme.gwsgradledroidgamma.test"

    }
    /*
     Warning, multi-catch is not until android 4.4.2
     */
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
    }

    lintOptions {
        quiet true
        abortOnError false
        ignoreWarnings true
        xmlReport false
        htmlReport true
        lintConfig file("${project.rootDir}/config/quality/androidlint/lint.xml")
        htmlOutput file("${project.buildDir}/reports/lint/lint-results.html")
        xmlOutput file("${rootProject.buildDir}/reports/lint/lint-results.xml")
        disable 'InvalidPackage'            //Some libraries have issues with this.
        disable 'OldTargetApi'              //Lint gives this warning but SDK 20 would be Android L Beta.
        disable 'IconDensities'             //For testing purpose. This is safe to remove.
        disable 'IconMissingDensityFolder'  //For testing purpose. This is safe to remove.
    }

    aaptOptions {
        noCompress 'txt'
        ignoreAssetsPattern "!.svn:!.git:!.ds_store:!*.scc:.*:<dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"
    }

    signingConfigs {

        //release {
        //props stored in gradle.properties at userhome .gradle subfolder
        // for product release and you just substitute the correct vars
        // otherwise for demo of libs use what is listed

        //storeFile file(FREDGROTT_RELEASE_STORE_FILE)
        //storePassword FREDGROTT_RELEASE_STORE_PASSWORD
        //keyAlias FREDGROTT_RELEASE_KEY_ALIAS
        //keyPassword FREDGROTT_RELEASE_KEY_PASSWORD

        // }

        myDemo{
            storeFile file('../buildsystem/demokey.jks')
            storePassword 'droiddroid'
            keyAlias 'dkey'
            keyPassword 'droiddroid'
        }

    }

    buildTypes {
        debug {
            // Run code coverage reports by default on debug builds.
            debuggable true
            minifyEnabled false
            testCoverageEnabled true
            applicationIdSuffix '.dev'
            versionNameSuffix '-dev'

            buildConfigField BOOLEAN, LOG_HTTP_REQUESTS, TRUE
            buildConfigField BOOLEAN, REPORT_CRASHES, FALSE
            buildConfigField BOOLEAN, ENABLE_VIEW_SERVER, TRUE
            buildConfigField BOOLEAN, ENABLE_SHARING, TRUE
            buildConfigField STRING, "BUILD_TIME", "\"${rootProject.ext.buildTime}\""



        }

        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro', 'proguard-matches-android-optimize.pro'
            //if its app demo of library than it gets
            //signingConfig signingConfigs.myDemo
            //other wise it gets an uncommented signingConfigs.release
            //with the right product key pertaining to whether its on the Ci server or not
            //noinspection GroovyAssignabilityCheck
            signingConfig signingConfigs.myDemo
            applicationIdSuffix '.release'
            versionNameSuffix '-release'

            buildConfigField BOOLEAN, LOG_HTTP_REQUESTS, FALSE
            buildConfigField BOOLEAN, REPORT_CRASHES, TRUE
            buildConfigField BOOLEAN, ENABLE_VIEW_SERVER, FALSE
            buildConfigField BOOLEAN, ENABLE_SHARING, FALSE
            buildConfigField STRING, GIT_HASH, rootProject.ext.gitSha
            buildConfigField STRING, "BUILD_TIME", "\"${rootProject.ext.buildTime}\""





        }

    }
    // Always show the result of every unit test, even if it passes.
    testOptions{
        reportDir = "$rootProject.ext.ourReportsDir/androidTests"

        unitTests.all {
            testLogging {
                events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
                // to show it in the console
                outputs.upToDateWhen { false }
                showStandardStreams = true
            }
        }
    }

}
spoon {
    failOnFailure = false
    teamCityLog = false
    //noAnimations = true
}
// espresso has a support annotation dep that is usually out of synch
// with rest of the support libs, thus we force resolve to the
// more up-to-date one
//noinspection GroovyAssignabilityCheck
configurations.all{
    resolutionStrategy.force 'com.android.support:support-annotations:23.1.1'

}


dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    //noinspection GroovyAssignabilityCheck
    testCompile rootProject.ext.tddDependencies.junit
    //noinspection GroovyAssignabilityCheck
    testCompile rootProject.ext.tddDependencies.mockito
    //noinspection GroovyAssignabilityCheck
    testCompile rootProject.ext.tddDependencies.powermockJunit
    //noinspection GroovyAssignabilityCheck
    testCompile rootProject.ext.tddDependencies.powermockMockito
    //noinspection GroovyAssignabilityCheck
    testCompile rootProject.ext.tddDependencies.assertjJunitCore

    //noinspection GroovyAssignabilityCheck
    androidTestCompile rootProject.ext.instrumentedDependencies.espressoRunner
    //noinspection GroovyAssignabilityCheck
    androidTestCompile rootProject.ext.instrumentedDependencies.espressoRules
    //noinspection GroovyAssignabilityCheck
    androidTestCompile rootProject.ext.instrumentedDependencies.espressoCore
    androidTestCompile (rootProject.ext.instrumentedDependencies.espressoContrib){
        exclude module: 'recyclerview-v7'
        exclude module: 'support-v4'

    }
    androidTestCompile (rootProject.ext.instrumentedDependencies.assertjAndroid){
        exclude group: 'com.android.support'
    }
    androidTestCompile (rootProject.ext.instrumentedDependencies.assertjAppCompat){
        exclude group: 'com.android.support'
    }
    //noinspection GroovyAssignabilityCheck
    androidTestCompile rootProject.ext.instrumentedDependencies.spoonClient
    //noinspection GroovyAssignabilityCheck
    //androidTestCompile rootProject.ext.instrumentedDependencies.gwsdroidinsutil

    //noinspection GroovyAssignabilityCheck
    compile rootProject.ext.androidSupportDependencies.appCompat
    //noinspection GroovyAssignabilityCheck
    compile rootProject.ext.logDependencies.timber
    //noinspection GroovyAssignabilityCheck
    compile rootProject.ext.eventbusDependencies.otto
    //noinspection GroovyAssignabilityCheck
    compile rootProject.ext.appDebugDependencies.leakCanaryReleaseCompile

    //noinspection GroovyAssignabilityCheck
    debugCompile rootProject.ext.appDebugDependencies.leakCanaryDebugCompile
    //noinspection GroovyAssignabilityCheck
    //debugCompile rootProject.ext.databaseDebugDependencies.dbinspector
    //noinspection GroovyAssignabilityCheck
    debugCompile rootProject.ext.appDebugDependencies.gwsdroidviewserver

}
// non flavored version to provide the hook that we use to disable system animations
// during testing
task grantAnimationPermission(type: Exec, dependsOn: 'installDebug') { // or install{productFlavour}{buildType}
    commandLine "adb shell pm grant $android.defaultConfig.testApplicationId android.permission.SET_ANIMATION_SCALE".split(' ')
}

tasks.whenTaskAdded { task ->
    if (task.name.startsWith('connectedAndroidTest')) {
        //noinspection GroovyAssignabilityCheck
        task.dependsOn grantAnimationPermission
    }
}
